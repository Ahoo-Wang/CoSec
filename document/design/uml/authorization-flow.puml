@startuml
!include layout.puml
title Authorization Flow

participant User
participant AuthorizationFilter
participant RequestParser
participant SecurityContextParser
participant TokenVerifier
participant Authorization

User++

User -> AuthorizationFilter++: request()
AuthorizationFilter -> RequestParser++: parse()
AuthorizationFilter <-- RequestParser--: Request
AuthorizationFilter -> SecurityContextParser++: parse()
SecurityContextParser -> TokenVerifier++: verify(AccessToken)
SecurityContextParser <-- TokenVerifier--: Principal
AuthorizationFilter <-- SecurityContextParser--: SecurityContext
AuthorizationFilter -> Authorization++: authorize(Request,SecurityContext)
AuthorizationFilter <-- Authorization--: authorized?
alt authorized is false
    User <-- AuthorizationFilter: UNAUTHORIZED
else authorized is true
    AuthorizationFilter -> AuthorizationFilter ++ : proceed()
    User <-- AuthorizationFilter--: response
end
@enduml

@startuml
!include layout.puml
title Authorization.authorize(Request,SecurityContext)
start
:authorize(Request,SecurityContext);
group Global Policies
:get Global Policies;
:get Deny Statements;
if (verify request using Deny Statements) is (true) then
  :deny request;
  stop
else (false)
  :get Allow Statements;
  if (verify request using Allow Statements) is (true) then
    :allow request;
    stop
  else (false)
  :Principal Policies;
  endif
endif
end group

group Principal Policies
:get Principal Policies;
:get Deny Statements;
if (verify request using Deny Statements) is (true) then
  :deny request;
  stop
else (false)
  :get Allow Statements;
  if (verify request using Allow Statements) is (true) then
    :allow request;
    stop
  else (false)
  :Role Permissions;
  endif
endif
end group

group Role Permissions
:get Role Permissions;
:get Deny Permissions;
if (verify request using Deny Permissions) is (true) then
  :deny request;
  stop
else (false)
  :get Allow Permissions;
  if (verify request using Allow Permissions) is (true) then
    :allow request;
    stop
  else (false)
    :deny request;
  endif
endif
end group
stop
@enduml
